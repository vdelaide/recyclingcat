/*
Rhythm Cat by Me :3

Description: 
This is a rhythm game following Gatita, as she goes through five levels of
Rhythm-Doctor-esque gameplay 

*/

const player = "p";
const playerBitmap = bitmap`
................
................
................
................
.......00...0...
.......010001...
...0..0000000.0.
..0....0060060..
..0...0000000.0.
..0....22222....
...0...00222....
....00000020....
....000020002...
................
................
................`;
const target = "t"; // the thing you're supposed to hit

const startTrack = "a"
const track = "b";
const beat = "c"; // the place you're supposed to hit the target
const endTrack = "d"

const star = "e";
setLegend(
  [player, playerBitmap],
  [target, bitmap`
................
................
................
................
.....6666666....
....666666666...
....666666666...
....666666666...
....666666666...
....666666666...
....666666666...
.....6666666....
................
................
................
................`],
  [startTrack, bitmap`
................
................
................
................
................
................
3333333333333333
3337333F33333333
33373333F3333333
22373223F2223222
33373333F3333333
3333777777777333
3333333333333333
................
................
................`],
  [track, bitmap`
................
................
................
................
................
................
3333333333333333
3333333333333333
3333333333333333
2233322332223222
3333333333333333
3333333333333333
3333333333333333
................
................
................`],
  [beat, bitmap`
................
................
................
................
................
................
0000000000000000
0000000000000000
0000000000000000
2200022002220222
0000000000000000
0000000000000000
0000000000000000
................
................
................`],
  [endTrack, bitmap`
................
................
................
................
................
................
3333333333333333
3333333333333333
3333333333333333
2233322355223222
3333355535533333
3333333333333333
3333333333333333
................
................
................`]
);

let level = 0;
const levels = [
  map`
.............
.............
.............
.............
.pabbbbcbbd..
.............
.............
.............
.............` // title screen
]

setMap(levels[level]);
//setSolids([player, wall]);

// player inputs & movement

onInput("s", () => {
  getFirst(player).y += 1
});

onInput("k", () => {
  evaluateSignal(tilesWith(target, beat));
});

// helper functions
let score = 0;

function evaluateSignal(state){
  
  if (state.length === 0){
    updateScore(-1);
    return;
  };

  updateScore(100);
};

function updateScore(summand){
  
  score += summand;
  addText(score.toString(), {x: 16, y: 2, color: color`0`});
  
};

// MAIN

function Main(){
  let startingPosX;
  let startingPosY;
  let canMove = true;

  // in english: 
  // find all tiles with starttrack, loop through the array given of tiles
  // that have a start track, and then access the object inside of that
  // and use their x-pos/y-pos
  for (let i = 0;
       i < tilesWith(startTrack).length;
       i++){
    
    startingPosX = tilesWith(startTrack)[i][0].x;
    startingPosY = tilesWith(startTrack)[i][0].y;
    
    addSprite(startingPosX, startingPosY, target);
  };
  
  let targets = getAll(target);
  let endTracks = getAll(endTrack);

  // ready to scale with below commented code
  function moveTargets(){
    if (targets[0].x < endTracks[0].x){
      
      targets[0].x += 1;
      setTimeout(moveTargets, 500);
      
    };
  };

  moveTargets();
  
  // for(let movingTarget = 0;
  //     movingTarget < targets.length;
  //     movingTarget++){
  // };
  
};

Main();
